---
description: 
globs: **/*.tsx, **/*.jsx, components/**/*
alwaysApply: false
---
# React v18 Best Practices

## General Component Structure

- Use functional components over class components
- Keep components small and focused
- Extract reusable logic into custom hooks
- Use composition over inheritance
- Implement proper prop types with TypeScript
- Split large components into smaller, focused ones

## Hooks

- Follow the Rules of Hooks
- Use custom hooks for reusable logic
- Keep hooks focused and simple
- Use appropriate dependency arrays in useEffect
- Implement cleanup in useEffect when needed
- Avoid nested hooks

## State Management

- Use useState for local component state
- Implement useReducer for complex state logic
- Use Context API for shared state
- Keep state as close to where it's used as possible
- Avoid prop drilling through proper state management
- Use state management libraries only when necessary

## Performance

- Use 'useMemo' and 'useCallback' to optimize performance.
- Implement proper lazy loading
- Use proper key props in lists
- Profile and optimize render performance

## Forms

- Use controlled components for form inputs
- Implement proper form validation
- Handle form submission states properly
- Show appropriate loading and error states
- Use form libraries for complex forms

## Error Handling

- Implement Error Boundaries
- Handle async errors properly
- Show user-friendly error messages
- Implement proper fallback UI
- Log errors appropriately
- Handle edge cases gracefully

## Testing

- Write unit tests for components
- Implement integration tests for complex flows
- Use React Testing Library
- Test user interactions
- Test error scenarios
- Implement proper mock data

## Security

- Avoid using `dangerouslySetInnerHTML` or `innerHtml` as it can lead to XSS vulnerabilities.

## Shared Component Structured

The structure is required only for components inside `shared/ui/` directory.

### Create a type utils to handle generic React components in TypeScript

```ts
type OverridableTypeMap {
  props: object;
  defaultComponent: ElementType;
}

export type TypeMap<Props extends object, RootComponent extends ElementType> = {
  props: Props;
  defaultComponent: RootComponent;
};

export type PolymorphicProps<
  ComponentTypeMap extends OverridableTypeMap,
  RootComponent extends ElementType,
> = ComponentTypeMap['props'] &
  DistributiveOmit<ComponentPropsWithRef<RootComponent>, keyof ComponentTypeMap['props']> & {
    component?: RootComponent;
  };

export type PolymorphicComponent<ComponentTypeMap extends OverridableTypeMap> = {
  <RootComponent extends ElementType = ComponentTypeMap['defaultComponent']>(
    props: PolymorphicProps<ComponentTypeMap, RootComponent>
  ): JSX.Element | null;
  propTypes?: any;
  displayName?: string | undefined;
};
```

### Example of shared component

```tsx
// Paper.tsx
const DEFAULT_TAG = "div";

type PaperVariant = "primary" | "secondary";

type PaperOwn = {
  variant?: PaperVariant;
};

type PaperTypeMap = TypeMap<PaperOwnProps, typeof DEFAULT_TAG>;

export type PaperProps<RootComponent extends ElementType = typeof DEFAULT_TAG> =
  PolymorphicProps<PaperTypeMap, RootComponent>;

const Paper = forwardRef<HTMLDivElement, PaperProps>((props, ref) => {
  const { component: Component = DEFAULT_TAG, ...rest } = props;
  // Implementation

  return (
    <Component
      {...rest}
      // Implementation
    />
  );
}) as PolymorphicComponent<PaperTypeMap>;

export default Paper;
```
